<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Js on Evincars blog</title>
    <link>https://evincars.github.io/categories/js/</link>
    <description>Recent content in Js on Evincars blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jan 2025 02:19:09 +0100</lastBuildDate>
    <atom:link href="https://evincars.github.io/categories/js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bind() vs Call() vs Apply()</title>
      <link>https://evincars.github.io/posts/bind-vs-call-vs-apply/</link>
      <pubDate>Thu, 23 Jan 2025 02:19:09 +0100</pubDate>
      <guid>https://evincars.github.io/posts/bind-vs-call-vs-apply/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind&#34;&gt;https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;They all attach &lt;strong&gt;this&lt;/strong&gt; into function (or object) and the difference is in the function invocation (see below).&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;call&lt;/strong&gt; attaches &lt;strong&gt;this&lt;/strong&gt; into function and executes the function immediately:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var person = {  &#xA;  name: &amp;#34;James Smith&amp;#34;,&#xA;  hello: function(thing) {&#xA;    console.log(this.name + &amp;#34; says hello &amp;#34; + thing);&#xA;  }&#xA;}&#xA;&#xA;person.hello(&amp;#34;world&amp;#34;);  // output: &amp;#34;James Smith says hello world&amp;#34;&#xA;person.hello.call({ name: &amp;#34;Jim Smith&amp;#34; }, &amp;#34;world&amp;#34;); // output: &amp;#34;Jim Smith says hello world&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;bind&lt;/strong&gt; attaches this into function and it needs to be invoked separately like this:&lt;/p&gt;</description>
    </item>
    <item>
      <title>General Knowledge of Js and Angular</title>
      <link>https://evincars.github.io/posts/general-knowledge-of-js-and-angular/</link>
      <pubDate>Wed, 22 Jan 2025 01:11:34 +0100</pubDate>
      <guid>https://evincars.github.io/posts/general-knowledge-of-js-and-angular/</guid>
      <description>&lt;p&gt;A property assigned to a function like sayHi.counter = 0 does not define a local variable counter inside it. In other words, a property counter and a variable let counter are two unrelated things.&#xA;We can treat a function as an object, store properties in it, but that has no effect on its execution. Variables are not function properties and vice versa. These are just parallel worlds.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;takovy zaklad pro performance je co nejvic omezit change detekci a potom mit co nejmin nodes v domu&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;switchMap&lt;/strong&gt; - for any source item, completes the previous Observable and immediately creates the next one&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;mergeMap&lt;/strong&gt; - creates an Observable immediately for any source item, all previous Observables are kept alive.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;concatMap&lt;/strong&gt; - waits for the previous Observable to complete before creating the next one&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;exhaustMap&lt;/strong&gt; - source items are ignored while the previous Observable is not completed&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;we can apply many &lt;strong&gt;attribute directives&lt;/strong&gt; to one host element. But can apply one structural directive to a host element.&lt;/li&gt;&#xA;&lt;li&gt;A &lt;strong&gt;structure directive&lt;/strong&gt; basically deals with manipulating the dom elements by typically adding or removing, or manipulating elements. But &amp;ldquo;attribute directives&amp;rdquo; are deal with changing the look and behavior of the DOM element&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;display: block&lt;/strong&gt; means that the element is displayed as a block, as paragraphs and headers have always been. A block has some whitespace above and below it and tolerates no HTML elements next to it, except when ordered otherwise (by adding a float declaration to another element, for instance).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Questions to Interview</title>
      <link>https://evincars.github.io/posts/questions-to-interview/</link>
      <pubDate>Wed, 22 Jan 2025 01:06:08 +0100</pubDate>
      <guid>https://evincars.github.io/posts/questions-to-interview/</guid>
      <description>&lt;p&gt;General questions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;What is the most popular JS engine?&lt;/strong&gt; &lt;em&gt;(Google&amp;rsquo;s V8)&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;How JS gets executed? | Why JS doesn&amp;rsquo;t use compiler?&lt;/strong&gt; &lt;em&gt;()&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Is JS single-threaded or multi-threaded language? Why?&lt;/strong&gt; &lt;em&gt;(Single-threaded; because of historical reasons - it was only a scripting language for browser. Aim was simplicity.)&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;How is it possible that multiple requests doesn&amp;rsquo;t block the main loop?&lt;/strong&gt; &lt;em&gt;(because of EventLoop)&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Is JS object oriented? How is inheritance handled?&lt;/strong&gt; &lt;em&gt;(heavily object-oriented; prototype inheritance - one object has ref to another obj (its prototype), and so on until last obj has null ref)&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;What is the Event Loop? How does it works?&lt;/strong&gt; &lt;em&gt;()&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;What is serialization/deserialisation in JS?&lt;/strong&gt; &lt;em&gt;(converting a data structure, such as object or array, into a format that can be easily stored; JSON.stringify)&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;What is the &amp;lsquo;hoisting&amp;rsquo; in JS?&lt;/strong&gt; &lt;em&gt;(a = 0; var a; i kdyz je deklarace na konci tak interpret to hodi na zacatek a je to OK)&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;What is the &amp;lsquo;memoizing&amp;rsquo; in JS?&lt;/strong&gt; &lt;em&gt;(used to increase the efficiency of function by storing the previous values that function has already been calculated)&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;For what is &amp;lsquo;Symbol&amp;rsquo; used?&lt;/strong&gt; &lt;em&gt;(mostly for creation unique keys for objects)&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;What returns this code: &lt;code&gt;1 &amp;amp;&amp;amp; 2&lt;/code&gt; (2), &lt;code&gt;0 &amp;amp;&amp;amp; 2&lt;/code&gt; (0), &lt;code&gt;1 || 2&lt;/code&gt; (1), &lt;code&gt;0 || 2&lt;/code&gt; (2)&lt;/li&gt;&#xA;&lt;li&gt;+[code] micro/macro tasks&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;What is the difference between these two codes?&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
